import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { setTimeout as delayTimeout } from 'timers/promises';

// T·∫°o __dirname cho ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// C·∫•u h√¨nh
const LOCALES_DIR = path.join(__dirname, '../public/locales');
const SOURCE_LANG = 'vi'; // Ng√¥n ng·ªØ g·ªëc - ƒë·ªïi t·ª´ 'vn' th√†nh 'vi'
const TARGET_LANGS = ['en']; // C√°c ng√¥n ng·ªØ c·∫ßn d·ªãch
const NAMESPACES = ['nav', 'common', 'banner', 'home', 'about', 'product', 'news', 'contact']; // C√°c namespace

// Cho ph√©p c·∫•u h√¨nh nhi·ªÅu instance LibreTranslate (bao g·ªìm local)
const LIBRE_URLS = (process.env.LIBRETRANSLATE_URLS ||
  'https://libretranslate.de,https://translate.argosopentech.com')
  .split(',').map(u => u.trim()).filter(Boolean);

// T√πy ch·ªçn nhi·ªÅu API key n·∫øu c·∫ßn t·∫°o nhi·ªÅu account mi·ªÖn ph√≠
const LIBRE_KEYS = (process.env.LIBRETRANSLATE_API_KEYS || '')
  .split(',').map(k => k.trim()).filter(Boolean);

class TranslationManager {
  constructor() {
    // S·ª≠ d·ª•ng fetch thay v√¨ GoogleTranslator ƒë·ªÉ tr√°nh dependency issues
    this.cache = new Map(); // cache k·∫øt qu·∫£ d·ªãch
    this.dbCache = new Map(); // cache d·ªØ li·ªáu DB
    this.libreIndex = 0;
  }

  getCacheKey(text, sourceLang, targetLang) {
    return `${sourceLang}:${targetLang}:${text}`;
  }

  async fetchWithRetry(url, options = {}, retries = 2, timeout = 8000) {
    for (let attempt = 0; attempt <= retries; attempt++) {
      const controller = new AbortController();
      const id = setTimeout(() => controller.abort(), timeout);
      try {
        const res = await fetch(url, { ...options, signal: controller.signal });
        clearTimeout(id);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res;
      } catch (err) {
        clearTimeout(id);
        if (attempt === retries) throw err;
      }
    }
  }

  isEnglishText(text) {
    return /[A-Za-z]/.test(text) && !/[√Ä-·ª¥√†-·ªπ]/.test(text);
  }

  // ƒê·ªçc file JSON
  readLocaleFile(lang, namespace) {
    const filePath = path.join(LOCALES_DIR, lang, `${namespace}.json`);
    if (!fs.existsSync(filePath)) {
      return {};
    }
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  }

  // Ghi file JSON
  writeLocaleFile(lang, namespace, data) {
    const dir = path.join(LOCALES_DIR, lang);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const filePath = path.join(dir, `${namespace}.json`);
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
  }

  // D·ªãch text b·∫±ng nhi·ªÅu API fallback v·ªõi LibreTranslate
  async translateText(text, targetLang, sourceLang = SOURCE_LANG) {
    const cleanText = text.trim();
    if (!cleanText) return text;

    const cacheKey = this.getCacheKey(cleanText, sourceLang, targetLang);
    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    // Th·ª≠ API ƒë·∫ßu ti√™n: MyMemory
    try {
      const myMemoryUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(cleanText)}&langpair=${sourceLang}|${targetLang}`;
      const response = await this.fetchWithRetry(myMemoryUrl);
      const data = await response.json();

      if (data && data.responseData && data.responseData.translatedText &&
          !data.responseData.translatedText.includes('INVALID SOURCE LANGUAGE') &&
          !data.responseData.translatedText.includes('MYMEMORY WARNING') &&
          !data.responseData.translatedText.includes('QUOTA EXCEEDED')) {
        console.log(`    ‚úÖ MyMemory API: "${data.responseData.translatedText}"`);
        this.cache.set(cacheKey, data.responseData.translatedText);
        return data.responseData.translatedText;
      }
    } catch (error) {
      console.log(`    ‚ùå MyMemory API failed: ${error.message}`);
    }

    // Th·ª≠ nhi·ªÅu instance LibreTranslate v·ªõi retry/timeout
    for (let i = 0; i < LIBRE_URLS.length; i++) {
      const url = `${LIBRE_URLS[this.libreIndex % LIBRE_URLS.length]}/translate`;
      const apiKey = LIBRE_KEYS.length ? LIBRE_KEYS[this.libreIndex % LIBRE_KEYS.length] : undefined;
      this.libreIndex++;
      try {
        const response = await this.fetchWithRetry(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            q: cleanText,
            source: sourceLang,
            target: targetLang,
            format: 'text',
            api_key: apiKey
          })
        });
        const data = await response.json();
        if (data && data.translatedText && data.translatedText.trim()) {
          console.log(`    ‚úÖ LibreTranslate API: "${data.translatedText}"`);
          this.cache.set(cacheKey, data.translatedText);
          return data.translatedText;
        }
      } catch (error) {
        console.log(`    ‚ùå LibreTranslate API failed: ${error.message}`);
      }
    }

    // Fallback cu·ªëi: d·ªãch manual cho m·ªôt s·ªë t·ª´ ph·ªï bi·∫øn
    const manualTranslations = {
      'vi': {
        'en': {
          'Th∆∞ vi·ªán': 'Library',
          'S√°ch': 'Book',
          'S√°ch m·ªõi': 'New Books',
          'S√°ch vƒÉn h·ªçc': 'Literature Books',
          'S√°ch khoa h·ªçc': 'Science Books',
          'S√°ch thi·∫øu nhi': 'Children\'s Books',
          'T√°c gi·∫£': 'Author',
          'Th·ªÉ lo·∫°i': 'Category',
          'T√¨m ki·∫øm': 'Search',
          'ƒêang t·∫£i...': 'Loading...',
          'Kh√¥ng c√≥ k·∫øt qu·∫£': 'No results',
          'L∆∞u': 'Save',
          'H·ªßy': 'Cancel',
          'S·ª≠a': 'Edit',
          'X√≥a': 'Delete',
          'Th√™m': 'Add',
          'M√¥ t·∫£': 'Description',
          'Gi√°': 'Price',
          'Tin t·ª©c': 'News',
          'Li√™n h·ªá': 'Contact',
          'V·ªÅ ch√∫ng t√¥i': 'About Us'
        }
      }
    };

    const manualResult = manualTranslations[SOURCE_LANG]?.[targetLang]?.[cleanText];
    if (manualResult) {
      console.log(`    ‚úÖ Manual Translation: "${manualResult}"`);
      return manualResult;
    }

    // N·∫øu t·∫•t c·∫£ API ƒë·ªÅu fail, gi·ªØ nguy√™n text g·ªëc v√† ƒë√°nh d·∫•u
    console.log(`    ‚ö†Ô∏è All APIs failed, keeping original: "${cleanText}"`);
    return `[NEEDS_TRANSLATION] ${cleanText}`;
  }

  // D·ªãch d·ªØ li·ªáu DB (ƒë∆∞·ª£c d√πng cho on-write v√† on-read)
  async translateDb(text, targetLang) {
    if (!text) return text;

    const isEnglish = this.isEnglishText(text);
    let sourceText = text;

    // N·∫øu chu·ªói ƒë·∫ßu v√†o l√† ti·∫øng Anh, chuy·ªÉn v·ªÅ ti·∫øng Vi·ªát l√†m ngu·ªìn chu·∫©n
    if (isEnglish) {
      sourceText = await this.translateText(text, SOURCE_LANG, 'en');
    }

    const cacheKey = this.getCacheKey(sourceText, SOURCE_LANG, targetLang);
    if (this.dbCache.has(cacheKey)) {
      return this.dbCache.get(cacheKey);
    }

    let translated;
    if (targetLang === SOURCE_LANG) {
      translated = sourceText;
    } else if (isEnglish && targetLang === 'en') {
      // VƒÉn b·∫£n g·ªëc ƒë√£ l√† ti·∫øng Anh
      translated = text;
    } else {
      translated = await this.translateText(sourceText, targetLang);
    }

    this.dbCache.set(cacheKey, translated);
    return translated;
  }

  // D·ªãch d·ªØ li·ªáu DB tr∆∞·ªõc khi ghi (on-write) v√† warm cache
  async translateDbOnWrite(text, targetLang = 'en') {
    const translated = await this.translateDb(text, targetLang);
    return translated;
  }

  // L·∫•y b·∫£n d·ªãch khi ƒë·ªçc d·ªØ li·ªáu (on-read)
  async translateDbOnRead(text, targetLang = 'en') {
    // G·ªçi translateDb tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o cache ƒë∆∞·ª£c x·ª≠ l√Ω th·ªëng nh·∫•t,
    // tr√°nh tr∆∞·ªùng h·ª£p ƒë·∫ßu v√†o l√† ti·∫øng Anh khi·∫øn kh√≥a cache kh√¥ng kh·ªõp.
    return this.translateDb(text, targetLang);
  }

  // T√¨m key m·ªõi c·∫ßn d·ªãch
  findMissingKeys(sourceData, targetData) {
    const missingKeys = {};

    const findMissing = (sourceObj, targetObj, prefix = '') => {
      Object.keys(sourceObj).forEach(key => {
        const fullKey = prefix ? `${prefix}.${key}` : key;

        if (typeof sourceObj[key] === 'object' && sourceObj[key] !== null) {
          if (!targetObj[key] || typeof targetObj[key] !== 'object') {
            targetObj[key] = {};
          }
          findMissing(sourceObj[key], targetObj[key], fullKey);
        } else {
          if (!targetObj[key]) {
            missingKeys[fullKey] = sourceObj[key];
          }
        }
      });
    };

    findMissing(sourceData, targetData);
    return missingKeys;
  }

  // D·ªãch t·∫•t c·∫£ key m·ªõi
  async translateMissingKeys() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu d·ªãch c√°c key m·ªõi...\n');

    for (const namespace of NAMESPACES) {
      console.log(`üìÅ X·ª≠ l√Ω namespace: ${namespace}`);

      // ƒê·ªçc file g·ªëc
      const sourceData = this.readLocaleFile(SOURCE_LANG, namespace);
      if (Object.keys(sourceData).length === 0) {
        console.log(`‚ö†Ô∏è  File ${SOURCE_LANG}/${namespace}.json tr·ªëng ho·∫∑c kh√¥ng t·ªìn t·∫°i\n`);
        continue;
      }

      for (const targetLang of TARGET_LANGS) {
        console.log(`  üåê D·ªãch sang ${targetLang}...`);

        // ƒê·ªçc file ƒë√≠ch
        let targetData = this.readLocaleFile(targetLang, namespace);

        // T√¨m key m·ªõi
        const missingKeys = this.findMissingKeys(sourceData, targetData);
        const missingCount = Object.keys(missingKeys).length;

        if (missingCount === 0) {
          console.log(`  ‚úÖ Kh√¥ng c√≥ key m·ªõi c·∫ßn d·ªãch\n`);
          continue;
        }

        console.log(`  üîÑ T√¨m th·∫•y ${missingCount} key m·ªõi, b·∫Øt ƒë·∫ßu d·ªãch...`);

        // D·ªãch t·ª´ng key
        for (const [keyPath, text] of Object.entries(missingKeys)) {
          console.log(`    - D·ªãch: "${text}"`);
          let sourceText = text;

          // N·∫øu text g·ªëc l√† ti·∫øng Anh, d·ªãch sang ti·∫øng Vi·ªát tr∆∞·ªõc
          if (this.isEnglishText(text)) {
            try {
              const viText = await this.translateText(text, SOURCE_LANG, 'en');
              this.setNestedValue(sourceData, keyPath, viText);
              this.writeLocaleFile(SOURCE_LANG, namespace, sourceData);
              sourceText = viText;

              if (targetLang === 'en') {
                // Gi·ªØ nguy√™n ti·∫øng Anh g·ªëc
                this.setNestedValue(targetData, keyPath, text);
                await delayTimeout(300);
                continue;
              }
            } catch (err) {
              console.warn(`    ‚ö†Ô∏è Kh√¥ng d·ªãch ƒë∆∞·ª£c EN‚ÜíVI: ${err.message}`);
            }
          }

          const translatedText = await this.translateText(sourceText, targetLang);

          // C·∫≠p nh·∫≠t v√†o targetData
          this.setNestedValue(targetData, keyPath, translatedText);

          // Delay ƒë·ªÉ tr√°nh spam API
          await delayTimeout(500);
        }

        // Ghi file
        this.writeLocaleFile(targetLang, namespace, targetData);
        console.log(`  ‚úÖ ƒê√£ d·ªãch xong ${missingCount} key cho ${targetLang}\n`);
      }
    }

    console.log('üéâ Ho√†n th√†nh d·ªãch t·∫•t c·∫£!');
  }

  // Set gi√° tr·ªã cho nested object
  setNestedValue(obj, path, value) {
    const keys = path.split('.');
    let current = obj;

    for (let i = 0; i < keys.length - 1; i++) {
      const key = keys[i];
      if (!current[key] || typeof current[key] !== 'object') {
        current[key] = {};
      }
      current = current[key];
    }

    current[keys[keys.length - 1]] = value;
  }

  // Th√™m key m·ªõi v√†o file g·ªëc
  addKey(namespace, key, value) {
    const sourceData = this.readLocaleFile(SOURCE_LANG, namespace);
    this.setNestedValue(sourceData, key, value);
    this.writeLocaleFile(SOURCE_LANG, namespace, sourceData);
    console.log(`‚úÖ ƒê√£ th√™m key "${key}": "${value}" v√†o ${SOURCE_LANG}/${namespace}.json`);
  }
}

// Kh·ªüi t·∫°o manager d√πng chung cho CLI v√† import t·ª´ module kh√°c
const manager = new TranslationManager();

// C√°c h√†m h·ªó tr·ª£ d·ªãch DB cho ph·∫ßn kh√°c c·ªßa ·ª©ng d·ª•ng
export const translateDbOnWrite = (text, targetLang) =>
  manager.translateDbOnWrite(text, targetLang);

export const translateDbOnRead = (text, targetLang) =>
  manager.translateDbOnRead(text, targetLang);

// CLI Commands
const args = process.argv.slice(2);
const command = args[0];

async function main() {
  switch (command) {
    case 'translate':
      await manager.translateMissingKeys();
      break;

    case 'add':
      if (args.length < 4) {
        console.log('S·ª≠ d·ª•ng: npm run translate:add <namespace> <key> <value>');
        console.log('V√≠ d·ª•: npm run translate:add nav welcome "Ch√†o m·ª´ng b·∫°n"');
        return;
      }
      const [, namespace, key, value] = args;
      manager.addKey(namespace, key, value);
      break;

    default:
      console.log('C√°c l·ªánh c√≥ s·∫µn:');
      console.log('  npm run translate:auto  - D·ªãch t·∫•t c·∫£ key m·ªõi');
      console.log('  npm run translate:add <namespace> <key> <value>  - Th√™m key m·ªõi');
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch(console.error);
}